[W1124 22:43:03.562445446 socket.cpp:752] [c10d] The client socket cannot be initialized to connect to [localhost]:29500 (errno: 97 - Address family not supported by protocol).
[W1124 22:43:20.960827973 socket.cpp:752] [c10d] The client socket cannot be initialized to connect to [localhost]:29500 (errno: 97 - Address family not supported by protocol).
[W1124 22:43:20.000072446 socket.cpp:752] [c10d] The client socket cannot be initialized to connect to [localhost]:29500 (errno: 97 - Address family not supported by protocol).
[W1124 22:43:20.011381666 socket.cpp:752] [c10d] The client socket cannot be initialized to connect to [localhost]:29500 (errno: 97 - Address family not supported by protocol).
[W1124 22:43:20.019200912 socket.cpp:752] [c10d] The client socket cannot be initialized to connect to [localhost]:29500 (errno: 97 - Address family not supported by protocol).
/n/home11/mingzeyuan/DiT/download.py:26: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  checkpoint = torch.load(model_name, map_location=lambda storage, loc: storage)
/n/home11/mingzeyuan/DiT/download.py:26: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  checkpoint = torch.load(model_name, map_location=lambda storage, loc: storage)
/n/home11/mingzeyuan/DiT/download.py:26: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  checkpoint = torch.load(model_name, map_location=lambda storage, loc: storage)
/n/home11/mingzeyuan/DiT/download.py:26: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  checkpoint = torch.load(model_name, map_location=lambda storage, loc: storage)
[rank2]:[W1124 22:43:48.377524057 ProcessGroupNCCL.cpp:4115] [PG ID 0 PG GUID 0 Rank 2]  using GPU 2 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect.Specify device_ids in barrier() to force use of a particular device,or call init_process_group() with a device_id.
[rank3]:[W1124 22:43:49.419879067 ProcessGroupNCCL.cpp:4115] [PG ID 0 PG GUID 0 Rank 3]  using GPU 3 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect.Specify device_ids in barrier() to force use of a particular device,or call init_process_group() with a device_id.
[rank1]:[W1124 22:43:49.420244182 ProcessGroupNCCL.cpp:4115] [PG ID 0 PG GUID 0 Rank 1]  using GPU 1 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect.Specify device_ids in barrier() to force use of a particular device,or call init_process_group() with a device_id.
[rank0]:[W1124 22:43:49.453524828 ProcessGroupNCCL.cpp:4115] [PG ID 0 PG GUID 0 Rank 0]  using GPU 0 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect.Specify device_ids in barrier() to force use of a particular device,or call init_process_group() with a device_id.
  0%|          | 0/79 [00:00<?, ?it/s]  0%|          | 0/79 [00:07<?, ?it/s]
[rank0]: Traceback (most recent call last):
[rank0]:   File "/n/home11/mingzeyuan/DiT/sample_ddp_quantized.py", line 169, in <module>
[rank0]:     main(args)
[rank0]:   File "/n/home11/mingzeyuan/DiT/sample_ddp_quantized.py", line 127, in main
[rank0]:     samples = diffusion.p_sample_loop(
[rank0]:   File "/n/home11/mingzeyuan/DiT/diffusion/gaussian_diffusion.py", line 450, in p_sample_loop
[rank0]:     for sample in self.p_sample_loop_progressive(
[rank0]:   File "/n/home11/mingzeyuan/DiT/diffusion/gaussian_diffusion.py", line 501, in p_sample_loop_progressive
[rank0]:     out = self.p_sample(
[rank0]:   File "/n/home11/mingzeyuan/DiT/diffusion/gaussian_diffusion.py", line 402, in p_sample
[rank0]:     out = self.p_mean_variance(
[rank0]:   File "/n/home11/mingzeyuan/DiT/diffusion/respace.py", line 92, in p_mean_variance
[rank0]:     return super().p_mean_variance(self._wrap_model(model), *args, **kwargs)
[rank0]:   File "/n/home11/mingzeyuan/DiT/diffusion/gaussian_diffusion.py", line 279, in p_mean_variance
[rank0]:     model_output = model(x, t, **model_kwargs)
[rank0]:   File "/n/home11/mingzeyuan/DiT/diffusion/respace.py", line 129, in __call__
[rank0]:     return self.model(x, new_ts, **kwargs)
[rank0]:   File "/n/home11/mingzeyuan/DiT/models.py", line 257, in forward_with_cfg
[rank0]:     model_out = self.forward(combined, t, y)
[rank0]:   File "/n/home11/mingzeyuan/DiT/models.py", line 247, in forward
[rank0]:     x = self.unpatchify(x)                   # (N, out_channels, H, W)
[rank0]:   File "/n/home11/mingzeyuan/DiT/models.py", line 230, in unpatchify
[rank0]:     imgs = x.reshape(shape=(x.shape[0], c, h * p, h * p))
[rank0]: RuntimeError: CUDA error: an illegal memory access was encountered
[rank0]: CUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.
[rank0]: For debugging consider passing CUDA_LAUNCH_BLOCKING=1
[rank0]: Compile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.

[rank0]:[W1124 22:43:59.853333469 ProcessGroupNCCL.cpp:1250] Warning: WARNING: process group has NOT been destroyed before we destruct ProcessGroupNCCL. On normal program exit, the application should call destroy_process_group to ensure that any pending NCCL operations have finished in this process. In rare cases this process can exit before this point and block the progress of another member of the process group. This constraint has always been present,  but this warning has only been added since PyTorch 2.4 (function operator())
W1124 22:44:00.998702 2289366 site-packages/torch/distributed/elastic/multiprocessing/api.py:897] Sending process 2289376 closing signal SIGTERM
W1124 22:44:00.999263 2289366 site-packages/torch/distributed/elastic/multiprocessing/api.py:897] Sending process 2289377 closing signal SIGTERM
W1124 22:44:00.999556 2289366 site-packages/torch/distributed/elastic/multiprocessing/api.py:897] Sending process 2289378 closing signal SIGTERM
E1124 22:44:01.841033 2289366 site-packages/torch/distributed/elastic/multiprocessing/api.py:869] failed (exitcode: 1) local_rank: 0 (pid: 2289375) of binary: /n/home11/mingzeyuan/.conda/envs/qdit/bin/python
Traceback (most recent call last):
  File "/n/home11/mingzeyuan/.conda/envs/qdit/bin/torchrun", line 33, in <module>
    sys.exit(load_entry_point('torch==2.5.1', 'console_scripts', 'torchrun')())
  File "/n/home11/mingzeyuan/.conda/envs/qdit/lib/python3.9/site-packages/torch/distributed/elastic/multiprocessing/errors/__init__.py", line 355, in wrapper
    return f(*args, **kwargs)
  File "/n/home11/mingzeyuan/.conda/envs/qdit/lib/python3.9/site-packages/torch/distributed/run.py", line 919, in main
    run(args)
  File "/n/home11/mingzeyuan/.conda/envs/qdit/lib/python3.9/site-packages/torch/distributed/run.py", line 910, in run
    elastic_launch(
  File "/n/home11/mingzeyuan/.conda/envs/qdit/lib/python3.9/site-packages/torch/distributed/launcher/api.py", line 138, in __call__
    return launch_agent(self._config, self._entrypoint, list(args))
  File "/n/home11/mingzeyuan/.conda/envs/qdit/lib/python3.9/site-packages/torch/distributed/launcher/api.py", line 269, in launch_agent
    raise ChildFailedError(
torch.distributed.elastic.multiprocessing.errors.ChildFailedError: 
============================================================
sample_ddp_quantized.py FAILED
------------------------------------------------------------
Failures:
  <NO_OTHER_FAILURES>
------------------------------------------------------------
Root Cause (first observed failure):
[0]:
  time      : 2024-11-24_22:44:00
  host      : holygpu8a25104.rc.fas.harvard.edu
  rank      : 0 (local_rank: 0)
  exitcode  : 1 (pid: 2289375)
  error_file: <N/A>
  traceback : To enable traceback see: https://pytorch.org/docs/stable/elastic/errors.html
============================================================
